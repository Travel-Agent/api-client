Order details:
--------------
URL: /api/v1/orders/%d
Response: Order Object
  An order will contain a full description of the specific order, including:
  id, client_id (resource_owner_id), created_at, tasks_count, cost (a Cost object), tasks (Array of Task objects), statuses(Array of Status objects)

Sample Response:
{
  id: 1, client_id: 3, created_at:,
  tasks_count: 2,
  cost: {
    credits: 10, usd: 20, ils: 76.6
  }
  tasks: [
    {
      id: 1000, display_id: '1-1', service_id: 1, language_id: 1, language_slug: 'en',
      updated_at: , sla: 4
      guidelines: 'This guidelines only exists in Content Article',
      cost : {
        credits: 5, usd: 10, ils: 38.3
      },
      identity : {
        id: 10, name: 'Identity 1', description: ''
      },
      task_items : [
        { id: 2000, headline: 'Headline', words: 300, style: 2, comment: '' },
        { id: 2001, headline: 'Headline', words: 300, style: 2, comment: '' }
      ]
    },
    {
      id: 1001, display_id: '1-2', service_id: 6, language_id: 2, language_slug: 'he',
      updated_at: , sla: 2
      cost : {
        credits: 5, usd: 10, ils: 38.3
      },
      task_items : [
        { id: 3000, url: 'http://url.com/, count: 5, anchor: 'Anchor' },
        { id: 3001, url: 'http://url2.com/, count: 5, anchor: 'Anchor 2'}
      ]
    }    
  ],
  statuses: [
    { status_id: 1, created_at: , name: 'New' },
    { status_id: 2, created_at: , name: 'Assigned' },
    { status_id: 3, created_at: , name: 'Moderator Review' },
    { status_id: 10, created_at: , name: 'Finished' }
  ]
}



URL: /api/v1/orders/%d/results

All Orders:
-----------
URL: /api/v1/orders
Response: Array of Orders

Sample Response:
[
  { id: 1, created_at: , status: { status_id: 1, name: 'New' },
  { id: 2, created_at: , status: { status_id: 2, name: 'Assigned' },
  { id: 3, created_at: , status: { status_id: 3, name: 'Moderator Review' },
  { id: 4, created_at: , status: { status_id: 10, name: 'Finished' },
]


                                             
Sample Client's parameters:
  ID:     21dcd1f3b33b678aa54d0e1f1dd0a184471a62f19f853bbb99db4f0926e8ace0
  Secret: f596123587b5478406a5163e01fd2c75e3002b458037d8ffb72c6556aafeca28

Send a user to authorize access to Zefo

URL: http://localhost:3000/oauth/authorize
Params:
  client_id     = 5362346a8da2460d708a8a33bebbe9e5d4ec6cbd8c4b8369fb3be4c7ffe554d2
  redirect_uri  = urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob
  response_type = code
  scope         = readonly+write

e.g.
http://localhost:3000/oauth/authorize?client_id=5362346a8da2460d708a8a33bebbe9e5d4ec6cbd8c4b8369fb3be4c7ffe554d2&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&&response_type=code&scope=readonly+write 

http://localhost:3000/oauth/authorize?client_id=21dcd1f3b33b678aa54d0e1f1dd0a184471a62f19f853bbb99db4f0926e8ace0&redirect_uri=http%3A%2F%2Fapi%2Fcallback&response_type=code&scope=readonly+write

The user is then redirected back to [redirect_uri](http://api/callback) with these parameters:

if user pressed Deny:
  error             = access_denied
  error_description = The+resource+owner+or+authorization+server+denied+the+request.

if user pressed Authorize:
  code  = 58fc09da44642b6dcdd2bdc425c208771823004971ab710b3410084e562a1e5b


The client (Zefo) needs to save this code and assign it to the end user, and when it wants to act on its behalf, acquire an access token:
URL: http://localhost:3000/oauth/token
Method: POST
Params:
  client_id     = 21dcd1f3b33b678aa54d0e1f1dd0a184471a62f19f853bbb99db4f0926e8ace0
  client_secret = f596123587b5478406a5163e01fd2c75e3002b458037d8ffb72c6556aafeca28
  code          = 58fc09da44642b6dcdd2bdc425c208771823004971ab710b3410084e562a1e5b
  grant_type    = authorization_code
  redirect_uri  = http://api/callback
  
e.g.:
curl http://localhost:3000/oauth/token \
  -d "client_id=21dcd1f3b33b678aa54d0e1f1dd0a184471a62f19f853bbb99db4f0926e8ace0" \
  -d "client_secret=f596123587b5478406a5163e01fd2c75e3002b458037d8ffb72c6556aafeca28" \
  -d "code=5f80e70bba978272b9f073adb64a842667b8d2f7daac41ab6046ff49a4c149ce" \
  -d "grant_type=authorization_code" \
  -d "redirect_uri=http://api/callback"

Response:
{
  "access_token"  : "b0b10f4955322a5f22e9753ffd3bbb2bf1965c41223b6da8f0e302054f79c3b6",
  "token_type"    : "bearer",
  "expires_in"    : 7200,
  "refresh_token" : "fa406c1645ba485986e67ce0fbe173fbc21cf3b7149c28d298d03783cfb423c4",
  "scope"         : "readonly write"
}

Now all the requests that are made, you can use that access_token (valid for 2 hours)
e.g. http://localhost:3000/api/v1/me?access_token=b0b10f4955322a5f22e9753ffd3bbb2bf1965c41223b6da8f0e302054f79c3b6



ce8b2ebde9b18c27216c3b92dd092ce1506965eaf93cd91d12be583320e4c0ae